import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.StringTokenizer;

public class LongestSubArrayWithSumZero {

	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int testCount = Integer.parseInt(br.readLine());
		while(testCount > 0) {
			int arrSize = Integer.parseInt(br.readLine());
			StringTokenizer st = new StringTokenizer(br.readLine());
			int index = 0;
			int arr[] = new int[arrSize];
			HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
			int sum = 0;
			int res = 0;
			while(index < arrSize) {
				sum = sum + Integer.parseInt(st.nextToken());
				if(hm.containsKey(sum)) {
					int localRes = index - hm.get(sum);
					if(localRes > res) {
						res = localRes;
					}
				}
			}
			String pattern = st.nextToken();
			String text = st.nextToken();
			int count = findMinEnclosingWindowSize(text, pattern);
			bw.write(Integer.toString(count)+"\n");
			testCount--;
		}
		bw.flush();

	}

}
