package si;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class KMP {
	

	static int[] buildFailureFunciton(String pattern) {
		int[] ps = new int[pattern.length()];
		int patIndex = 0;
		ps[patIndex++] = 0;
		while(patIndex < pattern.length()) {
			int p = ps[patIndex-1];
			if(p==0) {
				if(pattern.charAt(patIndex) == pattern.charAt(p)) {
					ps[patIndex] = 1;
				}
			} else {
				if(pattern.charAt(patIndex) == pattern.charAt(p)) {
					ps[patIndex] = p+1;
				} else {
					while(true) {
						if(p==0) {
							ps[patIndex] = 0;
							break;
						}
						if(pattern.charAt(p) == pattern.charAt(patIndex)) {
							p = p+1;
							ps[patIndex] = p;
							break;
						} else {
							p = ps[p-1];
						}
					}
				}
			}
			patIndex++;
		}
		System.out.println("prefix suffix = "+Arrays.toString(ps));
		return ps;
	}
	
	static int kmp(String text, String pattern) {
		int[] ps = buildFailureFunciton(pattern);
		int textIndex = 0;
		int patIndex = 0;
		int count = 0;
		
		while(textIndex < text.length()) {

			if(text.charAt(textIndex) == pattern.charAt(patIndex)) {
				textIndex++;
				patIndex++;
				if(patIndex == pattern.length()) {
					count++;
					patIndex = 0;
				}
			} else {
				
				if(patIndex == 0) {
					if(text.charAt(textIndex) == pattern.charAt(patIndex)){
						textIndex++;
						patIndex++;
					} else {
						textIndex++;
					}
				} else {
					if(text.charAt(textIndex) == pattern.charAt(patIndex)){
						textIndex++;
						patIndex++;
					} else {
						patIndex = ps[patIndex-1];
					}
				}
			}
		}
		return count;
	}
	
	public static void main(String[] args) throws Exception{

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));
		int testCaseCount = Integer.parseInt(br.readLine());
		while (testCaseCount > 0) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			String pattern = st.nextToken();
			String text = st.nextToken();
			int result = kmp(text, pattern);
			output.write(Integer.toString(result)+"\n");
			testCaseCount--;
		}
		output.flush();
	}

}
