package si;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class MaxSubSeqDP {
	
	static void findMaxSumSubSeq(int arr[]) {

		if (arr.length == 1) {
			System.out.println(arr[0]);
		}
		
		int max = Math.max(arr[0], arr[1]);
		int prevSum = arr[0];
		int dp[] = new int[arr.length];
		dp[0] = arr[0];
		dp[1] = arr[1];
		
		for (int i = 1; i< arr.length; i++) {
			int currSum = prevSum + arr[i];
			prevSum = currSum;

			if (currSum < arr[i]) {
				start = i;
				end = i;
				currSum = arr[i];
				prevSum = arr[i];
			} 
			
			if (currSum > max) {
				resStart = start;
				end = i;
				resEnd = end;
				max = currSum;
			}
		}
		
		System.out.println(max + " " + resStart + " " + resEnd);
	}
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int testCaseCount = Integer.parseInt(br.readLine());
		while (testCaseCount > 0) {
			int arraySize = Integer.parseInt(br.readLine());
			StringTokenizer st = new StringTokenizer(br.readLine());
			int arr[] = new int[arraySize];
			int index = 0;
			while (st.hasMoreElements()) {
				arr[index] = Integer.parseInt(st.nextToken());
				index++;
			}
			findMaxSumSubSeq(arr);
			testCaseCount--;
		}
		output.flush();

	}
}
