import java.util.HashMap;

public class A {
	
	static String whichSweetShouldIBring(String[] votes) {
        HashMap<String, Integer> sweetCount = new HashMap<String,Integer>();
        int maxCount = 0;
        String maxCountSweet = "";
        for(int i=0; i< votes.length; i++) {
            if(sweetCount.containsKey(votes[i])) {
                sweetCount.put(votes[i], sweetCount.get(votes[i])+1);
                if(maxCount < sweetCount.get(votes[i])) {
                	maxCount = sweetCount.get(votes[i]);
                	maxCountSweet = votes[i];
                }
                else if(maxCount == sweetCount.get(votes[i])) {
                	if(votes[i].compareTo(maxCountSweet) <= 0) {
                		maxCount = sweetCount.get(votes[i]);
                    	maxCountSweet = votes[i];
                	}
                }
            } else {
            	sweetCount.put(votes[i], 1);
            	if(maxCount < 1) {
                	maxCount = 1;
                	maxCountSweet = votes[i];
                }
            }
        }
        
        return maxCountSweet;
    }
	
	static int countBits(long num) {
		int count = 0;
		while(num > 0) {
			num = num&(num-1);
			count++;
		}
		return count;
	}
	
	static void toBinary(long n)
	{
		  for (int i = 1 << 64; i > 0; i = i / 2)
		        ((n & i)==1)? printf("1"): printf("0");
	}
	
	public static void main(String[] args) {
		System.out.println(1<<16);
		System.out.println(Math.pow(2, 15));
		System.out.println(countBits(100000000000000L));
		long k = ((1<<16) + (1<<15) );
		System.out.println(k);
		
		
	}
}
