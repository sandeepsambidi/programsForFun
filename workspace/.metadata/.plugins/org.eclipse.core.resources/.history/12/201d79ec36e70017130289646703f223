package si;

import java.util.Arrays;

public class LargestPalindrome {

	static long p = 37;
	static long lp = 1000000007;
	static long[] primes;
	
	static long[] calculateForwardHash(String str) {
		long forwardHash[] = new long[str.length()];
		forwardHash[0] = str.charAt(0);
		for (int i = 1; i < str.length(); i++) {
			forwardHash[i] = (forwardHash[i-1] + (str.charAt(i)*primes[i])%lp)%lp;
		}
		System.out.println("forward hash = "+Arrays.toString(forwardHash));
		return forwardHash;
	}
	
	static long[] calculateReverseHash(String str) {
		long reverseHash[] = new long[str.length()];
		reverseHash[str.length()-1] = str.charAt(0);
		for (int i = str.length()-2; i >= 0; i--) {
			reverseHash[i] = (reverseHash[i+1] + (str.charAt(i)*primes[str.length()-i -1])%lp)%lp;
		}
		System.out.println("reverse hash = "+Arrays.toString(reverseHash));
		return reverseHash;
	}

	
	static void preCompute(int length) {
		primes = new long[length];
		primes[0] = 1;
		for (int i = 1; i < length; i++) {
			primes[i] = (primes[i-1] * p)%lp;
		}
		System.out.println("primes = "+Arrays.toString(primes));
	}
	
	public static void main(String[] args) {
		preCompute(10);
		calculateForwardHash("sandeepred");
		calculateReverseHash("sandeepred");

	}

}
