package si;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class FindNcR {

	static long[] calculateCombinations(int n, int r) {
		long[][] storage = new long[n+1][r+1];
		int prime = 1000000007;
		for (int i = 0; i<= n; i++) {
			for (int j = 0; j<= Math.min(i, r); j++) {
				if(j==0 || j==i) {
					storage[i][j] = 1;
				} else {
					storage[i][j] = (storage[i-1][j] + storage[i-1][j-1])%prime;
				}
			}
		}
		return storage[n][r];
	}
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int testCaseCount = Integer.parseInt(br.readLine());
		while (testCaseCount > 0) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int n = Integer.parseInt(st.nextToken());
			int r = Integer.parseInt(st.nextToken());
			calculateCombinations(n, r);
			testCaseCount--;
		}
		output.flush();

	}

}
